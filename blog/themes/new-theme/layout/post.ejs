<%- partial('_partial/article-full', {item: page}) %>

<!-- Bottons Edit and Delete -->
<div class="button-container">
  <button onclick="editPost('<%= page.path %>')" class="edit-button">
    Editar
  </button>
  <button onclick="deletePost('<%= page.path %>')" class="delete-button">
    Eliminar
  </button>
</div>

<!-- Edit modal post -->
<div id="editModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Editar Post</h2>
    <textarea
      id="editContent"
      rows="10"
      cols="50"
      placeholder="Ingrese el nuevo contenido aquÃ­..."
    ></textarea
    ><br />
    <button id="saveButton">Guardar</button>
  </div>
</div>

<script>
  /**
   * Scroll to the top of the page with smooth behavior
   */
  function scrollToTop() {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }

  /**
   * Open the edit modal and load the post content for editing
   * @param {string} postPath - The path to the post to be edited
   */
  function editPost(postPath) {
    const postName = postPath.split('/').filter(Boolean).pop(); // Get the post name from the path

    // Show the modal for editing
    const modal = document.getElementById('editModal');
    modal.style.display = 'block';

    // Save button click event to submit changes
    document.getElementById('saveButton').onclick = function () {
      const newContent = document.getElementById('editContent').value; // Get content from textarea

      if (newContent) {
        // Make a PUT request to update the post
        fetch('http://localhost:3000/edit-post', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ postName: postName, content: newContent }), // Send post name and updated content
        })
        .then(response => response.text())
        .then(data => {
          alert(data); // Display server response
          window.location.reload(); // Reload page after edit
        })
        .catch(error => {
          console.error('Error editing post:', error);
          alert('Failed to edit post.');
        });

        // Close the modal after saving
        modal.style.display = 'none';
      }
    };
  }

  /**
   * Close the modal when clicking the 'X' button
   */
  document.querySelector('.close').onclick = function () {
    document.getElementById('editModal').style.display = 'none';
  };

  /**
   * Close the modal when clicking outside of the modal content
   * @param {Event} event - The click event
   */
  window.onclick = function (event) {
    const modal = document.getElementById('editModal');
    if (event.target === modal) {
      modal.style.display = 'none'; // Close modal if clicking outside of it
    }
  };

  /**
   * Delete a post after confirming with the user
   * @param {string} postPath - The path to the post to be deleted
   */
  function deletePost(postPath) {
    const postName = postPath.split('/').filter(Boolean).pop(); // Get post name from path
    const deleteUrl = `http://localhost:3000/delete/${postName}`; // Backend endpoint for deleting the post

    if (confirm('Are you sure you want to delete this post?')) {
      // Make a DELETE request to remove the post
      fetch(deleteUrl, { method: 'DELETE' })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Post deleted successfully');
          window.location.href = "http://localhost:4000"; // Redirect to home after deletion
        } else {
          alert('Error deleting post: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error deleting post:', error);
        alert('Failed to delete post.');
      });
    }
  }
</script>



